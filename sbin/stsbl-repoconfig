#!/bin/bash -e

# StsBl Repository Configuration Program
# Copyright (C) 2016 Felix Jacobi
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# source common library
. /usr/lib/iserv/stsblrepocfg-common

# super user check
if [ $UID != "0" ]; then
  echo "Root rights are required to run this program." >&2
  exit 0
fi

# Creating temporary file for output
OUTPUT=/tmp/stsbl-repoconfig-$RANDOM
echo > $OUTPUT

# Reading config values
readConfig() {
  # source config
  . /usr/lib/iserv/stsblrepocfg

  if [ -v REPOCUSTOMERNUMBER ]
  then
    CUSTOMERNUMBER=$REPOCUSTOMERNUMBER
  fi

  if [ -v REPOPASSWORD ]
  then
    PASSWORD=$REPOPASSWORD
  fi

  if [ -v REPOUPDATEMODE ]
  then
    UPDATEMODE=$REPOUPDATEMODE
  fi
}

# Function for config cancelling with messagebox
# Currently unsed
cancelConfig() {
  dialog --backtitle "StsBl Repository setup" --stdout --title "Are you sure?" --yesno "Are you sure that you want to cancel the configuration?" 15 35
  RESPOSE=$?
  if [ "$RESPOSE" = "0" ] || [ "$RESPOSE" = "255" ]
  then
    dialog --backtitle "StsBl Repository setup" --stdout --title "Cancelled" --msgbox "You cancelled the setup."  15 35
    exit 2
  fi
}

# Asking for customer number
askForCustomerNumber() {
  dialog --backtitle "StsBl Repository setup" --stdout --title "Customer number" --inputbox "Enter your customer number:" 14 35 $REPOCUSTOMERNUMBER > $OUTPUT
  RESPOSE=$?
  CUSTOMERNUMBER=$(cat $OUTPUT)
  if [ "$RESPOSE" = "0" ]
  then
    if [ "$CUSTOMERNUMBER" = "" ]
    then
      dialog --backtitle "StsBl Repository setup" --stdout --title "Error" --msgbox "Customer number can not be empty.\n\nTry it again."  15 35
      askForCustomerNumber
      return
    else
      echo
    fi
  elif [ "$RESPOSE" = "1" ] || [ "$RESPOSE" = "255" ]
  then
    cancelConfig
    askForCustomerNumber
    return
  fi
}

# Asking for password
askForPassword() {
  dialog --backtitle "StsBl Repository setup" --stdout --title "Password" --inputbox "Enter the password for the customer number $CUSTOMERNUMBER:" 15 35 $REPOPASSWORD > $OUTPUT
  RESPOSE=$?
  PASSWORD=$(cat $OUTPUT)
  if [ "$RESPOSE" = "0" ]
  then
    if [ "$PASSWORD" = "" ]
    then
      dialog --backtitle "StsBl Repository setup" --stdout --title "Error" --msgbox "Password can not be empty.\n\nTry it again."  15 35
      askForPassword
      return
    else
      echo
    fi
  elif [ "$RESPOSE" = "1" ] || [ "$RESPOSE" = "255" ]
  then
    cancelConfig
    askForPassword
    return
  fi
}

# Asking for dists
askForDists() {
  if [ "$REPOUPDATEMODE" = "stable" ]
  then
    STABLEENABLED=on
  else
    STABLEENABLED=off
  fi

  if [ "$REPOUPDATEMODE" = "testing" ]
  then
    TESTINGENABLED=on
  else
    TESTINGENABLED=off
  fi

  if [ "$REPOUPDATEMODE" = "unstable" ]
  then
    UNSTABLEENABLED=on
  else
    UNSTABLEENABLED=off
  fi

  if [ "$REPOUPDATEMODE" = "" ]
  then
    STABLEENABLED=on
    TESTINGENABLED=off
    UNSTABLEENABLED=off
  fi

  dialog --backtitle "StsBl Repository setup" --stdout --title "Select update mode" --radiolist "Select the update mode for the repository:" 15 80 8 \
         01 "stable" $STABLEENABLED \
         02 "testing" $TESTINGENABLED \
         03 "unstable (not recommended)" $UNSTABLEENABLED > $OUTPUT
  RESPOSE=$?
  UPDATEMODE=$(cat $OUTPUT)
  if [ "$RESPOSE" = "0" ]
  then
    if [ "$UPDATEMODE" = "" ]
    then
      dialog --backtitle "StsBl Repository setup" --stdout --title "Error" --msgbox "Select an update mode.\n\nTry it again."  15 35
      askForDists
    else
      if [ "$UPDATEMODE" = "01" ]
      then
        UPDATEMODE=stable
      elif [ "$UPDATEMODE" = "02" ]
      then
        UPDATEMODE=testing
      elif [ "$UPDATEMODE" = "03" ]
      then
        UPDATEMODE=unstable
      else
        dialog --backtitle "StsBl Repository setup" --stdout --title "Error" --msgbox "Unknown update mode.\n\nTry it again."  15 35
        askForDists
        return
      fi
      if [ "$UPDATEMODE" = "unstable" ]
      then
        # temporary unset exit on errors, because if in the following question the user
        # would select no, the program would exit (because of exit code 1)
        set +e
        dialog --backtitle "StsBl Repository setup" --stdout --title "Are you sure?" --yesno "Are you sure that you want to use unstable as update mode?\nIt could damage your system. Only using on testing systems is recommended." 15 35
        RESPOSE=$?
        if [ "$RESPOSE" = "1" ]
        then
          askForDists
          set -e
          return
        fi
      fi
      echo
    fi
  elif [ "$RESPOSE" = "1" ] || [ "$RESPOSE" = "255" ]
  then
    cancelConfig
    askForDists
    return
  fi

}

# Asking for suits
# currently unused
askForSuits() {
  MAINENABLED=off
  NONFREEENABLED=off

  for SUIT in $REPOSUITS
  do
    if [ "$SUIT" = "main" ]
    then
      MAINENABLED=on
    fi
    if [ "$SUIT" = "non-free" ]
    then
      NONFREEENABLED=on
    fi
  done

  if [ "$MAINENABLED" = "off" ] && [ "$NONFREEENABLED" = "off" ]
  then
    MAINENABLED=on
  fi

  dialog --backtitle "StsBl Repository setup" --stdout --title "Select suits" --checklist "Select the suits from which you want to install packages:" 15 80 8 \
         01 "main" $MAINENABLED \
         02 "non-free (indemnity agreement required)" $NONFREEENABLED > $OUTPUT
  RESPOSE=$?
  SUITS=$(cat $OUTPUT)
  if [ "$RESPOSE" = "0" ]
  then
    if [ "$SUITS" = "0" ]
    then
      dialog --backtitle "StsBl Repository setup" --stdout --title "Error" --msgbox "Select at least one suite.\n\nTry it again."  15 35
      askForSuits
      return
    else
      # Required fix for debians dialog
      SUITLIST=""
      NEWFILE="$OUTPUT.sed"
      sed 's/"//g' $OUTPUT > $NEWFILE
      SUITS=$(cat $NEWFILE)
      for SUIT in $SUITS
      do
        if [ "$SUIT" = "01" ]; then
          SUITLIST="$SUITLIST main"
        elif [ "$SUIT" = "02" ]; then
          SUITLIST="$SUITLIST non-free"
        fi
      done
      SUITS="$SUITLIST"
      echo
    fi
  elif [ "$RESPOSE" = "1" ] || [ "$RESPOSE" = "255" ]
  then
    cancelConfig
    askForSuits
    return
  fi
}

callSysFunctions() {
  iservchk apt
  aptitude update &> /dev/null
}

showSnapshotMessage() {
  # use snapshot server for repository testing server
  if [ $(hostname) = "rpt.stsbl.test" ]
  then
    echo "Hi there! I've dectected that you are on $(hostname). So, you going to use the snapshot repository."
    echo "Enjoy!"
    echo
    echo "Press any key to continue..."
    read
  fi
}

# main program
readConfig
askForCustomerNumber
storeConfig
readConfig
askForPassword
storeConfig
readConfig
askForDists
storeConfig
readConfig
showSnapshotMessage
callSysFunctions

# cleaning up
rm -f $OUTPUT

exit 0
