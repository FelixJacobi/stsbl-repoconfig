#!/bin/bash
set -e

# StsBl Repository Configuration Program
# Copyright (C) 2019 Felix Jacobi
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# set global variables
export TEXTDOMAIN=iserv

# source common library
. /usr/lib/iserv/stsblrepocfg-common
. /usr/bin/gettext.sh

# super user check
if [ $UID != "0" ]; then
  echo $(eval_gettext "Root rights are required to run this program.") >&2
  exit 0
fi

# Creating temporary file for output
OUTPUT="$(mktemp stsbl-repoconfig.XXXXXXXXX)" 

# prefix iservcfg to title if we are called from iservcfg
if [ "$1" = "--iservcfg" ]
then
  # do not abort on errors if we are coming from iservcfg
  set +e
  IsIServcfg=1
  TitlePrefix="IServ-Konfiguration > "
else
  IsIServcfg=0
  TitlePrefix=""
fi

Title="$TitlePrefix""$(eval_gettext "StsBl Repository setup")"

# Reading config values
readConfig() {
  # source config
  . /usr/lib/iserv/stsblrepocfg

  if [ -v REPOCUSTOMERNUMBER ]
  then
    CUSTOMERNUMBER="$REPOCUSTOMERNUMBER"
  fi

  if [ -v REPOPASSWORD ]
  then
    PASSWORD="$REPOPASSWORD"
  fi

  if [ -v REPOUPDATEMODE ]
  then
    UPDATEMODE="$REPOUPDATEMODE"
  fi
}

# Asking for customer number
askForCustomerNumber() {
  dialog --backtitle "$Title" --stdout --title "$(eval_gettext "Customer number")" --inputbox "$(eval_gettext "Enter your customer number:")" 14 35 "$REPOCUSTOMERNUMBER" > "$OUTPUT"
  RESPOSE=$?
  CUSTOMERNUMBER=$(cat $OUTPUT)
  if [ "$RESPOSE" = "0" ]
  then
    if [ -z "$CUSTOMERNUMBER" ]
    then
      dialog --backtitle "$Title" --stdout --title "$(eval_gettext "Error")" --msgbox "$(eval_gettext "The customer number can not be empty.")\n\n$(eval_gettext "Please try it again.")"  15 35
      askForCustomerNumber
      return
    else
      echo
    fi
  elif [ "$RESPOSE" = "1" ] || [ "$RESPOSE" = "255" ]
  then
    exit 0
  fi
}

# Asking for password
askForPassword() {
  dialog --backtitle "$Title" --stdout --title "$(eval_gettext "Password")" --inputbox "$(printf "$(eval_gettext "Enter the password for the customer number %s:")" "$CUSTOMERNUMBER")" 15 35 "$REPOPASSWORD" > "$OUTPUT"
  RESPOSE=$?
  PASSWORD=$(cat $OUTPUT)
  if [ "$RESPOSE" = "0" ]
  then
    if [ -z "$PASSWORD" ]
    then
      dialog --backtitle "$Title" --stdout --title "$(eval_gettext "Error")" --msgbox "$(eval_gettext "The password can not be empty.")\n\n$(eval_gettext "Please try it again.")"  15 35
      askForPassword
      return
    else
      echo
    fi
  elif [ "$RESPOSE" = "1" ] || [ "$RESPOSE" = "255" ]
  then
    exit 0
  fi
}

# main program
readConfig
askForCustomerNumber
storeConfig
readConfig
askForPassword
storeConfig
readConfig
eval_gettext "Please wait ..."
storeConfig
readConfig
iservchk apt

# cleaning up
rm -f $OUTPUT

exit 0
