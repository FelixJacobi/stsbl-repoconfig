#!/bin/bash -e

# StsBl Repository Configuration Program
# Copyright (C) 2016 Felix Jacobi
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# set global variables
export BASHGT_DOMAIN=iserv

# source common library
. /usr/lib/iserv/stsblrepocfg-common

# source bash-gettext library
. /usr/lib/bash-gettext/functions.sh


# super user check
if [ $UID != "0" ]; then
  echo $(_ "Root rights are required to run this program.") >&2
  exit 0
fi

# Creating temporary file for output
OUTPUT=/tmp/stsbl-repoconfig-$RANDOM
touch $OUTPUT

# define global variables

# prefix iservcfg to title if we are called from iservcfg
if [ "$1" = "--iservcfg" ]
then
  # do not abort on errors if we are coming from iservcfg
  set +e
  IsIServcfg=1
  TitlePrefix="IServ-Konfiguration > "
else
  IsIServcfg=0
  TitlePrefix=""
fi

Title="$TitlePrefix""$(_ "StsBl Repository setup")"

# Reading config values
readConfig() {
  # source config
  . /usr/lib/iserv/stsblrepocfg

  if [ -v REPOCUSTOMERNUMBER ]
  then
    CUSTOMERNUMBER=$REPOCUSTOMERNUMBER
  fi

  if [ -v REPOPASSWORD ]
  then
    PASSWORD=$REPOPASSWORD
  fi

  if [ -v REPOUPDATEMODE ]
  then
    UPDATEMODE=$REPOUPDATEMODE
  fi
}

# Asking for customer number
askForCustomerNumber() {
  dialog --backtitle "$Title" --stdout --title "$(_ "Customer number")" --inputbox "$(_ "Enter your customer number:")" 14 35 $REPOCUSTOMERNUMBER > $OUTPUT
  RESPOSE=$?
  CUSTOMERNUMBER=$(cat $OUTPUT)
  if [ "$RESPOSE" = "0" ]
  then
    if [ -z "$CUSTOMERNUMBER" ]
    then
      dialog --backtitle "$Title" --stdout --title "$(_ "Error")" --msgbox "$(_ "The customer number can not be empty.")\n\n$(_ "Please try it again.")"  15 35
      askForCustomerNumber
      return
    else
      echo
    fi
  elif [ "$RESPOSE" = "1" ] || [ "$RESPOSE" = "255" ]
  then
    exit 0
  fi
}

# Asking for password
askForPassword() {
  dialog --backtitle "$Title" --stdout --title "$(_ "Password")" --inputbox "$(__ "Enter the password for the customer number %s:" "$CUSTOMERNUMBER")" 15 35 $REPOPASSWORD > $OUTPUT
  RESPOSE=$?
  PASSWORD=$(cat $OUTPUT)
  if [ "$RESPOSE" = "0" ]
  then
    if [ -z "$PASSWORD" ]
    then
      dialog --backtitle "$Title" --stdout --title "$(_ "Error")" --msgbox "$(_ "The password can not be empty.")\n\n$(_ "Please try it again.")"  15 35
      askForPassword
      return
    else
      echo
    fi
  elif [ "$RESPOSE" = "1" ] || [ "$RESPOSE" = "255" ]
  then
    exit 0
  fi
}

# Asking for dists
askForDists() {
  if [ "$REPOUPDATEMODE" = "stable" ]
  then
    STABLEENABLED=on
  else
    STABLEENABLED=off
  fi

  if [ "$REPOUPDATEMODE" = "testing" ]
  then
    TESTINGENABLED=on
  else
    TESTINGENABLED=off
  fi

  if [ "$REPOUPDATEMODE" = "unstable" ]
  then
    UNSTABLEENABLED=on
  else
    UNSTABLEENABLED=off
  fi

  if [ "$REPOUPDATEMODE" = "" ]
  then
    STABLEENABLED=on
    TESTINGENABLED=off
    UNSTABLEENABLED=off
  fi

  dialog --backtitle "$Title" --stdout --title "$(_ "Select update mode")" --radiolist "$(_ "Select the update mode for the repository:")" 15 80 8 \
         01 "$(_ "Only stable updates")" $STABLEENABLED \
         02 "$(_ "testing updates")" $TESTINGENABLED \
         03 "$(_ "unstable updates (not recommended)")" $UNSTABLEENABLED > $OUTPUT
  RESPOSE=$?
  UPDATEMODE=$(cat $OUTPUT)
  if [ "$RESPOSE" = "0" ]
  then
    if [ "$UPDATEMODE" = "" ]
    then
      dialog --backtitle "$Title" --stdout --title "$(_ "Error")" --msgbox "$(_ "Please select an update mode.")\n\n$(_ "Please try it again.")"  15 35
      askForDists
    else
      if [ "$UPDATEMODE" = "01" ]
      then
        UPDATEMODE=stable
      elif [ "$UPDATEMODE" = "02" ]
      then
        UPDATEMODE=testing
      elif [ "$UPDATEMODE" = "03" ]
      then
        UPDATEMODE=unstable
      else
        dialog --backtitle "$Title" --stdout --title "$(_ "Error")" --msgbox "$(_ "Unknown update mode.")\n\n$(_ "Please try it again.")"  15 35
        askForDists
        return
      fi
      if [ "$UPDATEMODE" = "unstable" ]
      then
	if [ "$isIServcfg" = "0" ]
	then
	  set +e
	fi

        dialog --backtitle "$Title" --stdout --title "$(_ "Are you sure?")" --yesno "$(_ "Are you sure that you want to use unstable as update mode?")\n$(_ "It could damage your system. Only using on testing systems is recommended.")" 15 35
	RESPOSE=$?

	if [ "$isIServcfg" = "0" ]
	then
	  set -e
	fi

        if [ "$RESPOSE" = "1" ]
        then
          askForDists
          return
        fi
      fi
      echo
    fi
  elif [ "$RESPOSE" = "1" ] || [ "$RESPOSE" = "255" ]
  then
    exit 0
  fi

}

callSysFunctions() {
  iservchk -a apt
}

# main program
readConfig
askForCustomerNumber
storeConfig
readConfig
askForPassword
storeConfig
readConfig
askForDists
echo $(_ "Please wait ...")
storeConfig
readConfig
callSysFunctions

# cleaning up
rm -f $OUTPUT

exit 0
