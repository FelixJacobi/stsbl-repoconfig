#!/bin/bash -e

# STSBL Repository Configuration Program
# Copyright (C) 2016 Felix Jacobi
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# source common library
. /usr/lib/iserv/stsblrepocfg-common

# Prints out the program help
echoHelp() {
  echo "Usement:"
  echo "  stsbl-umode"
  echo "  Print current update mode and exit."
  echo
  echo "  stsbl-umode [ stable | testing | unstable ]"
  echo "  Set a new update mode."
  echo
  echo "  stsbl-umode --help"
  echo "  Print out this help and exit."
}

# super user check
if [ $UID != 0 ]; then
  echo "Root rights are required to run this program." >&2
  exit 1
fi

# Checking number of arguments
if [ "$#" -gt 1 ] || [ "$#" -lt 0 ]
then
  echo "Wrong number of arguments." >&2
  echo >&2
  echoHelp >&2
  exit 1
fi

if [ "$1" = "--help" ]
then
  echoHelp
  exit 0
fi

# source config
. /usr/lib/iserv/stsblrepocfg

OLDUPDATEMODE="$REPOUPDATEMODE"
NEWUPDATEMODE="$1"

if [ "$#" = 0 ]
then
  echo "The current update mode is $OLDUPDATEMODE."
  exit 0
fi

if [ "$NEWUPDATEMODE" = "$OLDUPDATEMODE" ]
then
  echo "The update mode will keep the value $NEWUPDATEMODE."
  exit 0
elif [ "$NEWUPDATEMODE" = "stable" ] || [ "$NEWUPDATEMODE" = "testing" ] || [ "$NEWUPDATEMODE" = "unstable" ]
then
  echo "$OLDUPDATEMODE -> $NEWUPDATEMODE"
else
  echo "Unknown update mode $NEWUPDATEMODE." >&2
  echo >&2
  echoHelp >&2
  exit 1
fi

storeConfig
iservchk apt
aptitude update &> /dev/null
exit 0
